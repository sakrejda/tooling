
parameters {
  real delta_0;
  real q_0; 
  real sigma_0;
  real mu_0;
}

model {
  mu_0 ~ normal(1,sigma_log / kappa[5]);
  sigma_0 ~ normal(1,sigma_log / kappa[6]);
  delta_0 ~ normal(1, kappa[8] * sigma_log / kappa[7]);
  q_0 ~ normal(0, sigma_logit / kappa[8]);

  {
  vector[n_obs] mu;
  vector[n_obs] sigma;
  vector[n_obs] alpha;
  vector[n_obs] beta;
  vector[n_obs] delta;
  vector[n_obs] q;
  for ( i in 1:n_obs )
    mu[i] = kappa[1] * exp(kappa[5] * mu_0);
  for ( i in 1:n_obs )
    sigma[i] = kappa[2] * exp(kappa[6] * sigma_0);
  for ( i in 1:n_obs )
    alpha[i] = (mu[i]/sigma[i])^2;
  for ( i in 1:n_obs )
    beta[i] = (sigma[i]^2)/(mu[i]);
  for ( i in 1:n_obs )
    delta[i] = kappa[3] * exp((2 * kappa[8] + delta_0) * kappa[7]) + beta[i];
  for ( i in 1:n_obs ) 
      q[i] = kappa[4] * inv_logit(-2 + q_0 * kappa[8]);
  
  for ( i in 1:n_obs ) {
    target += gamma_exp_sum_gamma_mix_lpdf_1S(t_delta[i], q[i], alpha[i], beta[i], delta[i]);
    if (t_truncate[i] != positive_infinity())
      target += -gamma_exp_sum_gamma_mix_lcdf_1S(t_truncate[i], q[i], alpha[i], beta[i], delta[i]);
  }
  }
}

generated quantities {
  real g_mu;
  real g_sigma;
  real g_alpha;
  real g_beta;
  real g_delta;
  real g_q;
  g_mu = kappa[1] * exp(kappa[5] * mu_0);
  g_sigma = kappa[2] * exp(kappa[6] * sigma_0);
  g_alpha = (g_mu/g_sigma)^2;
  g_beta = (g_sigma^2)/g_mu;
  g_delta = kappa[3] * exp((2 * kappa[8] + delta_0) * kappa[7]) + g_beta;
  g_q = kappa[4] * inv_logit(-2 + q_0 * kappa[8]);
}



